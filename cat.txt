/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ebitca <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:19:42 by ebitca            #+#    #+#             */
/*   Updated: 2016/12/27 16:03:18 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		check_char(const char *s)
{
	if (s[g_jump] == '+')
		modify_plus();
	else if (s[g_jump] == '-')
		g_flag[5] = 1;
	else if (s[g_jump] == '0')
		modify_zero();
	else if (s[g_jump] == '#')
		g_flag[9] = 1;
	else if (s[g_jump] == '.')
		return (modify_dot());
	else if (s[g_jump] == '%')
		return (modify_percent(s));
	else if (s[g_jump] >= '1' && s[g_jump] <= '9')
		return (3);
	else
	{
		g_flag[3]--;
		if (g_flag[13])
			g_flag[2] = 1;
		g_flag[8] = 0;
		check_flag_array(s[g_jump], 31);
		return (0);
	}
	return (1);
}

void	init2(void)
{
	g_flag[4] = 0;
	g_flag[8] = 0;
}

short	check_single(const char *s)
{
	if (s[g_jump] == 's')
		return (30);
	if (s[g_jump] == 'S')
		return (33);
	if (s[g_jump] == 'C' || s[g_jump] == 'c')
	{
		if (g_flag[13])
			g_flag[2] = 1;
		init2();
	}
	if (s[g_jump] == 'C')
		return (34);
	if (s[g_jump] == 'c')
		return (31);
	if (s[g_jump] == 'd' || s[g_jump] == 'i')
		return (5);
	if (s[g_jump] == 'D')
		return (3);
	if (s[g_jump] == 'u' || s[g_jump] == 'U')
		delete_sign();
	if (s[g_jump] == 'u')
		return (6);
	if (s[g_jump] == 'U')
		return (4);
	return (0);
}

short	is_spec(const char *s)
{
	short result;

	result = check_single(s);
	if (result)
		return (result);
	if (s[g_jump] == 'p')
		return (set_pointer());
	result = check_ox(s);
	if (result)
		return (result);
	result = check_h_spec(s);
	if (result)
		return (result);
	result = check_l_spec(s);
	if (result)
		return (result);
	result = check_z_spec(s);
	if (result)
		return (result);
	result = check_j_spec(s);
	if (result)
		return (result);
	return (0);
}

short	check_lc(const char *s)
{
	if (s[g_jump + 1] == 'c' || s[g_jump + 1] == 'C')
	{
		if (g_flag[13])
			g_flag[2] = 1;
		g_flag[4] = 0;
		++g_jump;
		g_flag[8] = 0;
		return (34);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_f_array.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ebitca <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:36:13 by ebitca            #+#    #+#             */
/*   Updated: 2016/12/27 15:36:16 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	check_f_array_2(short spec)
{
	int i;

	i = -1;
	if (g_flag[0] == 1 && !g_flag[7] && spec != 31 && spec != 34)
		ft_putchar(' ');
	while (++i < g_flag[3] && !g_flag[5])
		if (!g_flag[2])
			ft_putchar(' ');
}

void	check_f_array_3(void)
{
	int i;

	i = -1;
	if (!g_flag[5])
	{
		if (g_flag[3] && g_flag[2] && g_flag[9])
			print_diez();
		while (++i < g_flag[3])
			if (g_flag[2])
				ft_putchar('0');
	}
}

void	check_diez(short spec)
{
	int i;

	i = -1;
	if (spec != 31 && spec != 34)
	{
		if (g_flag[4] && g_flag[9])
			print_diez();
		while (++i < g_flag[4])
			ft_putchar('0');
	}
}

void	check_flag_array(long long nr, short spec)
{
	int					i;
	unsigned long long	uns_nr;

	check_f_array_2(spec);
	ft_negate(&nr, &uns_nr, spec);
	if (g_flag[1] && !g_flag[7] && spec != 31 && spec != 34)
		ft_putchar('+');
	check_f_array_3();
	check_diez(spec);
	if (g_flag[8] == 1)
	{
		ft_putchar(' ');
		if (g_flag[12])
			ft_putstr("0x");
	}
	else if (g_flag[8] != 2)
		select_ft_put(uns_nr, spec);
	else if (g_flag[12])
		ft_putstr("0x");
	i = -1;
	while (++i < g_flag[3] && g_flag[5])
		ft_putchar(' ');
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_h_1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ebitca <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:47:00 by ebitca            #+#    #+#             */
/*   Updated: 2016/12/27 15:51:20 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	check_h_spec_2(const char *s)
{
	if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'i')
	{
		++g_jump;
		return (7);
	}
	if (s[g_jump + 1] == 'D')
	{
		++g_jump;
		return (3);
	}
	if (s[g_jump + 1] == 'u')
	{
		delete_sign();
		++g_jump;
		return (8);
	}
	if (s[g_jump + 1] == 'U')
	{
		delete_sign();
		++g_jump;
		return (4);
	}
	return (0);
}

short	check_h_spec_3(const char *s)
{
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (8);
	}
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (8);
	}
	if (s[g_jump + 1] == 'o')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (8);
	}
	return (0);
}

short	check_h_spec_4(const char *s)
{
	if (s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (4);
	}
	if (s[g_jump + 1] == 'p')
	{
		++g_jump;
		return (set_pointer());
	}
	if (s[g_jump + 1] == 'C')
	{
		++g_jump;
		g_flag[4] = 0;
		if (g_flag[13])
			g_flag[2] = 1;
		g_flag[8] = 0;
		return (34);
	}
	return (0);
}

short	check_h_spec_5(const char *s)
{
	if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'i')
	{
		++g_jump;
		return (9);
	}
	if (s[g_jump + 1] == 'D')
	{
		++g_jump;
		return (3);
	}
	if (s[g_jump + 1] == 'u')
	{
		delete_sign();
		++g_jump;
		return (10);
	}
	if (s[g_jump + 1] == 'U')
	{
		delete_sign();
		++g_jump;
		return (4);
	}
	return (0);
}

short	check_h_spec(const char *s)
{
	short result;

	if (s[g_jump] == 'h')
	{
		if ((result = check_h_spec_2(s)) && result)
			return (result);
		if ((result = check_h_spec_3(s)) && result)
			return (result);
		if ((result = check_h_spec_4(s)) && result)
			return (result);
		if (s[g_jump + 1] == 'h')
		{
			++g_jump;
			if ((result = check_h_spec_5(s)) && result)
				return (result);
			if ((result = check_h_spec_6(s)) && result)
				return (result);
			if ((result = check_h_spec_7(s)) && result)
				return (result);
		}
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_h_2.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ebitca <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:54:10 by ebitca            #+#    #+#             */
/*   Updated: 2016/12/27 15:55:02 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	check_hx(const char *s)
{
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (10);
	}
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (10);
	}
	return (0);
}

short	check_h_spec_6(const char *s)
{
	short result;

	result = check_hx(s);
	if (result)
		return (result);
	if (s[g_jump + 1] == 'o')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (10);
	}
	if (s[g_jump + 1] == 'S')
	{
		++g_jump;
		return (33);
	}
	return (0);
}

short	check_h_spec_7(const char *s)
{
	if (s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (4);
	}
	if (s[g_jump + 1] == 'p')
	{
		++g_jump;
		return (set_pointer());
	}
	if (s[g_jump + 1] == 'C')
	{
		if (g_flag[13])
			g_flag[2] = 1;
		g_flag[4] = 0;
		++g_jump;
		g_flag[8] = 0;
		return (34);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_l_1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ebitca <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:55:20 by ebitca            #+#    #+#             */
/*   Updated: 2016/12/27 16:04:21 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	check_l_spec(const char *s)
{
	short result;

	if (s[g_jump] == 'l')
	{
		if ((result = check_l_spec_2(s)) && result)
			return (result);
		if ((result = check_l_spec_3(s)) && result)
			return (result);
		if (s[g_jump + 1] == 'l')
		{
			++g_jump;
			if ((result = check_l_spec_4(s)) && result)
				return (result);
			if ((result = check_l_spec_5(s)) && result)
				return (result);
		}
	}
	return (0);
}

short	check_l_spec_2(const char *s)
{
	if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'D' || s[g_jump + 1] == 'i')
	{
		++g_jump;
		return (3);
	}
	if (s[g_jump + 1] == 'u' || s[g_jump + 1] == 'U')
	{
		delete_sign();
		++g_jump;
		return (4);
	}
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (4);
	}
	if (s[g_jump + 1] == 's')
	{
		++g_jump;
		return (33);
	}
	return (0);
}

short	check_l_spec_3(const char *s)
{
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (4);
	}
	if (s[g_jump + 1] == 'o' || s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (4);
	}
	if (s[g_jump + 1] == 'p')
	{
		++g_jump;
		return (set_pointer());
	}
	if (check_lc(s))
		return (34);
	return (0);
}

short	check_l_spec_4(const char *s)
{
	if (s[g_jump + 1] == 'u' || s[g_jump + 1] == 'U')
	{
		delete_sign();
		++g_jump;
		return (2);
	}
	if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'D' || s[g_jump + 1] == 'i')
	{
		++g_jump;
		return (1);
	}
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (2);
	}
	return (0);
}

short	check_l_spec_5(const char *s)
{
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (2);
	}
	if (s[g_jump + 1] == 'o' || s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (2);
	}
	if (s[g_jump + 1] == 'p')
	{
		++g_jump;
		return (set_pointer());
	}
	if (check_lc(s))
		return (34);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_other.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:54:34 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:54:38 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	check_o(const char *s)
{
	if (s[g_jump] == 'o')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		g_flag[7] = 2;
		return (6);
	}
	if (s[g_jump] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		g_flag[7] = 2;
		return (4);
	}
	return (0);
}

short	check_ox(const char *s)
{
	short result;

	if (s[g_jump] == 'x')
	{
		if (g_flag[9] && g_flag[11])
			g_flag[8] = 2;
		g_small = 1;
		g_flag[7] = 1;
		return (6);
	}
	if (s[g_jump] == 'X')
	{
		if (g_flag[9] && g_flag[11])
			g_flag[8] = 2;
		g_small = 0;
		g_flag[7] = 1;
		return (6);
	}
	result = check_o(s);
	if (result)
		return (result);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_zj.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:47:35 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:47:39 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	check_z_spec_2(const char *s)
{
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (12);
	}
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (12);
	}
	if (s[g_jump + 1] == 'o' || s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (12);
	}
	return (0);
}

short	check_z_spec(const char *s)
{
	short result;

	if (s[g_jump] == 'z')
	{
		if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'i' ||
			s[g_jump + 1] == 'D')
		{
			++g_jump;
			return (1);
		}
		if (s[g_jump + 1] == 'u' || s[g_jump + 1] == 'U')
		{
			delete_sign();
			++g_jump;
			return (12);
		}
		if ((result = check_z_spec_2(s)) && result)
			return (result);
		if (s[g_jump + 1] == 'p')
		{
			++g_jump;
			return (set_pointer());
		}
	}
	return (0);
}

short	check_j_spec_2(const char *s)
{
	if (s[g_jump + 1] == 'x')
	{
		++g_jump;
		g_small = 1;
		g_flag[7] = 1;
		return (14);
	}
	if (s[g_jump + 1] == 'X')
	{
		++g_jump;
		g_small = 0;
		g_flag[7] = 1;
		return (14);
	}
	if (s[g_jump + 1] == 'o' || s[g_jump + 1] == 'O')
	{
		if (g_flag[11] && g_flag[9])
			g_flag[4]--;
		++g_jump;
		g_flag[7] = 2;
		return (14);
	}
	return (0);
}

short	check_j_spec(const char *s)
{
	short result;

	if (s[g_jump] == 'j')
	{
		if (s[g_jump + 1] == 'd' || s[g_jump + 1] == 'D' ||
			s[g_jump + 1] == 'i')
		{
			++g_jump;
			return (11);
		}
		if (s[g_jump + 1] == 'u' || s[g_jump + 1] == 'U')
		{
			delete_sign();
			++g_jump;
			return (14);
		}
		if (s[g_jump + 1] == 'p')
		{
			++g_jump;
			return (set_pointer());
		}
		if ((result = check_j_spec_2(s)) && result)
			return (result);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   core.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:46:52 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:47:04 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	skip(const char *s)
{
	if (s[g_jump] == 32)
	{
		if (g_flag[0] != -1)
			g_flag[0] = 1;
		while (s[g_jump] == 32)
			g_jump++;
	}
}

int		skip_space(const char *s, va_list *mylist)
{
	short spec;

	g_jump++;
	if (!s[g_jump])
	{
		--g_jump;
		return (0);
	}
	skip(s);
	if (!s[g_jump])
	{
		--g_jump;
		return (0);
	}
	spec = is_spec(s);
	if (spec)
	{
		if (spec == 30 || spec == 33)
			print_str(mylist, spec);
		else
			print_nbr(mylist, spec);
		return (0);
	}
	return (check_char(s));
}

void	print_letter(const char *s, va_list *mylist)
{
	int cs;

	if (s[g_jump] == '%')
	{
		reset_flags();
		while ((cs = skip_space(s, mylist)) && cs)
		{
			if (!cs)
				g_jump++;
			else if (cs == 1)
				continue;
			else
				g_flag[cs] = ft_atoi(s);
		}
	}
	else
		ft_putchar(s[g_jump]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/13 16:16:54 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 16:12:44 by ebitca           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		ft_printf(const char *s, ...)
{
	va_list mylist;

	reset_bratan();
	va_start(mylist, s);
	while (s[++g_jump])
	{
		print_letter(s, &mylist);
	}
	va_end(mylist);
	return (g_cont);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   func.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/13 16:27:11 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:44:30 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	reset_flags(void)
{
	int i;

	i = -1;
	while (++i < 14)
		g_flag[i] = 0;
}

void	reset_bratan(void)
{
	g_jump = -1;
	g_cont = 0;
	g_small = -1;
	reset_flags();
}

void	delete_sign(void)
{
	g_flag[3]++;
	g_flag[0] = -1;
	g_flag[1] = 0;
}

void	ft_putchar(char c)
{
	write(1, &c, 1);
	++g_cont;
}

void	ft_putstr(char *s)
{
	while (*s)
	{
		ft_putchar(*s);
		s++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   func.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/13 16:27:11 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:43:23 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

char	*ft_strdup(const char *src)
{
	unsigned int	i;
	char			*mem;
	unsigned int	j;

	i = 0;
	while (*(src + i))
		i++;
	mem = (char*)malloc(i + 1);
	if (!mem)
		return (0);
	j = -1;
	while (++j < i)
		*(mem + j) = *(src + j);
	*(mem + j) = 0;
	return (mem);
}

size_t	ft_strlen(const char *str)
{
	int i;

	i = 0;
	while (*(str + i))
		i++;
	return (i);
}

int		ft_atoi(const char *str)
{
	int nr;

	nr = 0;
	while (str[g_jump] && (str[g_jump] >= '0') && (str[g_jump] <= '9'))
	{
		nr *= 10;
		nr += (int)str[g_jump] - '0';
		g_jump++;
	}
	g_jump--;
	return (nr);
}

void	ft_putnbr(unsigned long long nb)
{
	if (nb == 0)
		ft_putchar('0');
	else if (nb > 0 && nb < 10)
	{
		ft_putchar('0' + nb);
		return ;
	}
	else
	{
		ft_putnbr(nb / 10);
		ft_putchar('0' + nb % 10);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_data.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:42:17 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:42:20 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void		get_data_type_2(long long *temp, un *uni, short spec)
{
	if (spec == 9 || spec == 31)
		*temp = (char)uni->chr;
	else if (spec == 10)
		*temp = (unsigned char)uni->uchr;
	else if (spec == 12)
		*temp = (size_t)uni->szt;
	else if (spec == 11)
		*temp = (intmax_t)uni->imaxt;
	else if (spec == 14)
		*temp = (uintmax_t)uni->uimaxt;
	else if (spec == 34)
		*temp = (wchar_t)uni->wchr;
}

long long	get_data_type(un *uni, short spec)
{
	long long temp;

	if (spec == 1 || spec == 2)
		temp = (long long)uni->ll;
	else if (spec == 3)
		temp = (long int)uni->lin;
	else if (spec == 4)
		temp = (unsigned long int)uni->ulin;
	else if (spec == 5)
		temp = (int)uni->in;
	else if (spec == 6)
		temp = (unsigned int)uni->uin;
	else if (spec == 7)
		temp = (short)uni->sh;
	else if (spec == 8)
		temp = (unsigned short)uni->ush;
	else
		get_data_type_2(&temp, uni, spec);
	return (temp);
}

long long	get_from_list(va_list *my_list, short spec)
{
	long long result;

	if (spec == 1 || spec == 2)
		result = va_arg(*my_list, long long);
	else if (spec == 3)
		result = va_arg(*my_list, long int);
	else if (spec == 4)
		result = va_arg(*my_list, unsigned long int);
	else if (spec == 6)
		result = va_arg(*my_list, unsigned int);
	else if (spec == 12)
		result = va_arg(*my_list, size_t);
	else if (spec == 11)
		result = va_arg(*my_list, intmax_t);
	else if (spec == 14)
		result = va_arg(*my_list, uintmax_t);
	else
		result = va_arg(*my_list, int);
	return (result);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_length.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:39:54 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:40:01 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		get_length_hexadecimal(unsigned long long uns_temp, short spec)
{
	if ((spec == 4 && sizeof(long int) == 4) || (spec == 12 &&
		sizeof(size_t) == 4))
		return (get_length_hex_ui(uns_temp));
	if (spec < 5 || spec > 10)
		return (get_length_hex_ul(uns_temp));
	return (get_length_hex_ui(uns_temp));
}

int		get_length_octal(unsigned long long uns_temp, short spec)
{
	if ((spec == 4 && sizeof(long int) == 4) || (spec == 12 &&
		sizeof(size_t) == 4))
		return (get_length_oct_ui(uns_temp));
	if (spec < 5 || spec > 10)
		return (get_length_oct_ul(uns_temp));
	return (get_length_oct_ui(uns_temp));
}

int		get_length_2(long long temp, unsigned long long uns_temp, short spec)
{
	int i;

	i = 0;
	if (spec % 2 == 1)
	{
		if (temp < 0)
		{
			g_flag[0] = 0;
			g_flag[1] = 0;
			i++;
		}
		while (temp)
		{
			temp = temp / 10;
			i++;
		}
	}
	else if (spec % 2 == 0)
		while (uns_temp)
		{
			uns_temp = uns_temp / 10;
			i++;
		}
	return (i);
}

int		get_length(un *uni, short spec)
{
	long long			temp;
	unsigned long long	uns_temp;
	int					i;

	i = 0;
	if (uni->ll == 0 || spec == 31 || spec == 34)
		return (1);
	uni->ll = get_data_type(uni, spec);
	temp = uni->ll;
	uns_temp = uni->ull;
	if (g_flag[7] == 1)
		return (get_length_hexadecimal(uns_temp, spec));
	if (g_flag[7] == 2)
		return (get_length_octal(uns_temp, spec));
	if (uni->ll < 0)
		g_flag[0] = -1;
	i = get_length_2(temp, uns_temp, spec);
	return (i);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hexa_work.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:39:16 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:39:20 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_hexa_ui(unsigned n)
{
	const char *base_s = "0123456789abcdef";
	const char *base_l = "0123456789ABCDEF";

	if (n >> 4)
		ft_hexa_ui(n >> 4);
	if (g_small)
		ft_putchar(base_s[n % 16]);
	else
		ft_putchar(base_l[n % 16]);
}

void	ft_hexa_ul(unsigned long long n)
{
	const char *base_s = "0123456789abcdef";
	const char *base_l = "0123456789ABCDEF";

	if (n >> 4)
		ft_hexa_ul(n >> 4);
	if (g_small)
		ft_putchar(base_s[n % 16]);
	else
		ft_putchar(base_l[n % 16]);
}

void	ft_hexa(unsigned long long n)
{
	const char *base_s = "0123456789abcdef";
	const char *base_l = "0123456789ABCDEF";

	g_flag[6]++;
	if (n >> 4 && g_flag[6] < g_flag[5] * 2)
		ft_hexa(n >> 4);
	if (g_small)
		ft_putchar(base_s[n % 16]);
	else
		ft_putchar(base_l[n % 16]);
}

void	ft_print_hex_ui(unsigned n)
{
	g_flag[6] = 0;
	if (n == 0)
		ft_putchar('0');
	else
		ft_hexa_ui(n);
}

void	ft_print_hex_ul(unsigned long long n)
{
	g_flag[6] = 0;
	if (n == 0)
		ft_putchar('0');
	else
		ft_hexa_ul(n);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hexa_work2.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:38:29 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:38:37 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		g_hex_ui_l(unsigned n)
{
	g_flag[6]++;
	if (n >> 4)
		g_hex_ui_l(n >> 4);
	return (g_flag[6]);
}

int		g_hex_ul_l(unsigned long long n)
{
	g_flag[6]++;
	if (n >> 4)
		g_hex_ul_l(n >> 4);
	return (g_flag[6]);
}

void	ft_binar(unsigned long long n)
{
	const char *base = "01";

	if (n >> 1)
		ft_binar(n >> 1);
	ft_putchar(base[n % 2]);
}

int		get_length_hex_ui(unsigned n)
{
	g_flag[6] = 0;
	return (g_hex_ui_l(n));
}

int		get_length_hex_ul(unsigned long long n)
{
	g_flag[6] = 0;
	return (g_hex_ul_l(n));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   modify.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:37:03 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:37:06 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

short	modify_dot(void)
{
	g_flag[2] = 0;
	if (g_flag[3] && !g_flag[9])
		g_flag[8] = 1;
	else if (!g_flag[9])
		g_flag[8] = 2;
	else
		g_flag[11] = 1;
	g_jump++;
	return (4);
}

void	modify_plus(void)
{
	g_flag[0] = -1;
	g_flag[1] = 1;
}

void	modify_zero(void)
{
	g_flag[10] = 1;
	g_flag[2] = 1;
	g_flag[13] = 1;
}

short	modify_percent(const char *s)
{
	if (!g_flag[3])
		ft_putchar('%');
	else
	{
		g_flag[3]--;
		if (g_flag[13])
			g_flag[2] = 1;
		g_flag[8] = 0;
		check_flag_array(s[g_jump], 31);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   modify_str.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:35:29 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:35:36 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	modify_wlen(wchar_t *wstr)
{
	int	wlen;
	int	i;

	wlen = 0;
	i = 0;
	while (wstr[i])
	{
		wlen += ft_wlen(wstr[i]);
		if (wlen > g_flag[4])
			break ;
		else if (wlen == g_flag[4])
			return ;
		++i;
	}
	wlen -= ft_wlen(wstr[i]);
	g_flag[3] = g_flag[3] + (g_flag[4] - wlen);
}

void	modify_str_length(int *length, wchar_t *wstr, short spec)
{
	if (g_flag[4] <= *length && g_flag[8])
		*length = g_flag[4];
	if (g_flag[3] - *length > 0)
		g_flag[3] = g_flag[3] - *length;
	else
		g_flag[3] = 0;
	if (g_flag[4] && g_flag[3] && spec == 33)
		modify_wlen(wstr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   number_work.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:31:54 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:32:01 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	print_nbr_2(short spec, int *abs_length, int length, long long ll)
{
	if ((spec % 2 == 1) && ll < 0)
		*abs_length = length - 1;
	else
		*abs_length = length;
	if (g_flag[0] || g_flag[1])
		g_flag[3]--;
	if ((g_flag[4] - *abs_length) > 0)
		g_flag[4] = g_flag[4] - *abs_length;
	else
		g_flag[4] = 0;
	if ((g_flag[3] - (g_flag[4] + length)) > 0)
		g_flag[3] = g_flag[3] - (g_flag[4] + length);
	else
		g_flag[3] = 0;
}

void	print_nbr(va_list *mylist, short spec)
{
	int	length;
	int	abs_length;
	un	uni;

	if (g_flag[12])
		uni.ll = (long long)va_arg(*mylist, void*);
	else
		uni.ll = get_from_list(mylist, spec);
	if (!(g_flag[8] && g_flag[4] == 0 && uni.ll == 0))
		g_flag[8] = 0;
	if (g_flag[9] && uni.ll == 0 && !g_flag[12])
		g_flag[9] = 0;
	if (g_flag[9] && g_flag[7] == 1)
		g_flag[3] -= 2;
	if (g_flag[9] && g_flag[7] == 2)
		g_flag[3]--;
	if (uni.ll < 0)
		g_flag[0] = -1;
	length = get_length(&uni, spec);
	print_nbr_2(spec, &abs_length, length, uni.ll);
	check_flag_array(uni.ll, spec);
}

short	set_pointer(void)
{
	if (g_flag[9] && g_flag[11])
		g_flag[8] = 2;
	g_small = 1;
	g_flag[7] = 1;
	g_flag[12] = 1;
	g_flag[9] = 1;
	return (2);
}

void	ft_negate(long long *nr, unsigned long long *uns_nr, short spec)
{
	if (*nr < 0 && (spec % 2 == 1))
	{
		ft_putchar('-');
		*uns_nr = -(*nr);
	}
	else
		*uns_nr = *nr;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   octa_work.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:30:04 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:30:16 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_octal_ui(unsigned n)
{
	const char *base_o = "01234567";

	if (n >> 3)
		ft_octal_ui(n >> 3);
	ft_putchar(base_o[n % 8]);
}

void	ft_octal_ul(unsigned long long n)
{
	const char *base_o = "01234567";

	if (n >> 3)
		ft_octal_ul(n >> 3);
	ft_putchar(base_o[n % 8]);
}

int		g_o_ui_l(unsigned n)
{
	g_flag[6]++;
	if (n >> 3)
		g_o_ui_l(n >> 3);
	return (g_flag[6]);
}

int		g_o_ul_l(unsigned long long n)
{
	g_flag[6]++;
	if (n >> 3)
		g_o_ul_l(n >> 3);
	return (g_flag[6]);
}

void	ft_print_oct_ui(unsigned n)
{
	g_flag[6] = 0;
	if (n == 0)
		ft_putchar('0');
	else
		ft_octal_ui(n);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   octa_work2.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:27:41 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:28:27 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_print_oct_ul(unsigned long long n)
{
	g_flag[6] = 0;
	if (n == 0)
		ft_putchar('0');
	else
		ft_octal_ul(n);
}

int		get_length_oct_ui(unsigned n)
{
	g_flag[6] = 0;
	return (g_o_ui_l(n));
}

int		get_length_oct_ul(unsigned long long n)
{
	g_flag[6] = 0;
	return (g_o_ul_l(n));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:26:38 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:26:46 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_print_hexadecimal(unsigned long long uns_nr, short spec)
{
	if (g_flag[9])
		print_diez();
	if ((spec == 4 && sizeof(long int) == 4) || (spec == 12 &&
				sizeof(size_t) == 4))
		ft_print_hex_ui(uns_nr);
	else if (spec < 5 || spec > 10)
		ft_print_hex_ul(uns_nr);
	else
		ft_print_hex_ui(uns_nr);
}

void	ft_print_octal(unsigned long long uns_nr, short spec)
{
	if (g_flag[9])
		print_diez();
	if ((spec == 4 && sizeof(long int) == 4) || (spec == 12 &&
				sizeof(size_t) == 4))
		ft_print_oct_ui(uns_nr);
	else if (spec < 5 || spec > 10)
		ft_print_oct_ul(uns_nr);
	else
		ft_print_oct_ui(uns_nr);
}

void	select_ft_put(unsigned long long uns_nr, short spec)
{
	if (spec == 31)
		ft_putchar(uns_nr);
	else if (spec == 34)
		ft_putchar_fd(uns_nr, 1);
	else if (!g_flag[7])
		ft_putnbr(uns_nr);
	else if (g_flag[7] == 1)
		ft_print_hexadecimal(uns_nr, spec);
	else if (g_flag[7] == 2)
		ft_print_octal(uns_nr, spec);
}

void	print_diez(void)
{
	if (g_flag[7] == 1 && g_small)
		ft_putstr("0x");
	if (g_flag[7] == 1 && !g_small)
		ft_putstr("0X");
	if (g_flag[7] == 2)
		ft_putchar('0');
	g_flag[9] = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_str.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:25:41 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:26:09 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_print_wstr_minus(wchar_t *wstr, int length)
{
	int	i;
	int	len;

	i = 0;
	while (i < length && *wstr)
	{
		len = ft_wlen(*wstr);
		if (i + len <= length)
			ft_putchar_fd(*wstr, 1);
		i += len;
		wstr++;
	}
	i = -1;
	while (++i < g_flag[3])
		ft_putchar(' ');
}

void	ft_print_str_minus(char *str, int length)
{
	int	i;

	i = -1;
	while (++i < length && str[i])
		ft_putchar(str[i]);
	i = -1;
	while (++i < g_flag[3])
		ft_putchar(' ');
}

void	ft_print_wstr_width(wchar_t *wstr, int length)
{
	int	i;
	int	len;

	i = -1;
	while (++i < g_flag[3])
	{
		if (g_flag[10])
			ft_putchar('0');
		else
			ft_putchar(' ');
	}
	i = 0;
	while (i < length && *wstr)
	{
		len = ft_wlen(*wstr);
		if (i + len <= length)
			ft_putchar_fd(*wstr, 1);
		i += len;
		wstr++;
	}
}

void	ft_print_str_width(char *str, int length)
{
	int	i;

	i = -1;
	while (++i < g_flag[3])
	{
		if (g_flag[10])
			ft_putchar('0');
		else
			ft_putchar(' ');
	}
	i = -1;
	while (++i < length && str[i])
		ft_putchar(str[i]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_str2.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:21:46 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:21:47 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		ft_wlen(wchar_t wchr)
{
	int i;

	i = 0;
	if (wchr < 128)
		i++;
	else if (wchr < 2047)
		i += 2;
	else if (wchr < 65535)
		i += 3;
	else
		i += 4;
	return (i);
}

void	print_str_2(wchar_t *wstr, char *str, int length, short spec)
{
	if (g_flag[5])
	{
		if (spec == 33)
			ft_print_wstr_minus(wstr, length);
		else
			ft_print_str_minus(str, length);
	}
	else
	{
		if (spec == 33)
			ft_print_wstr_width(wstr, length);
		else
			ft_print_str_width(str, length);
	}
}

void	init(int *length, short *to_free, char **str, wchar_t **wstr)
{
	*length = 0;
	*to_free = 0;
	*str = NULL;
	*wstr = NULL;
}

void	print_str(va_list *mylist, short spec)
{
	int		length;
	short	to_free;
	char	*str;
	wchar_t	*wstr;

	init(&length, &to_free, &str, &wstr);
	if (spec == 33)
		wstr = va_arg(*mylist, wchar_t*);
	else
		str = va_arg(*mylist, char*);
	if ((str == NULL && spec == 30) || (wstr == NULL && spec == 33))
	{
		to_free = 1;
		str = ft_strdup("(null)");
		spec = 30;
	}
	if (spec == 33)
		length = ft_wstrlen(wstr);
	else
		length = ft_strlen(str);
	modify_str_length(&length, wstr, spec);
	print_str_2(wstr, str, length, spec);
	if (to_free)
		free(str);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   wchar_work.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:19:52 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:19:54 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

int		ft_nbr_bits(unsigned int nbr)
{
	int	i;

	i = 1;
	while ((nbr = nbr >> 1))
		i++;
	return (i);
}

void	cond2(unsigned int ch, int *i, char *buff)
{
	buff[(*i)++] = ((ch >> 18) & 7) | 240;
	buff[(*i)++] = ((ch >> 12) & 63) | 128;
}

void	ft_putwchart(int wchar, int *len, char *buff)
{
	unsigned int	ch;
	int				n;
	int				i;

	i = 0;
	ch = (unsigned int)wchar;
	n = ft_nbr_bits(ch);
	if (n > 7 && ((*len += 1)))
	{
		if (n > 11 && ((*len += 1)))
		{
			if (n > 16 && ((*len += 2)))
				cond2(ch, &i, buff);
			else if ((*len += 1))
				buff[i++] = ((ch >> 12) & 15) | 224;
			buff[i++] = ((ch >> 6) & 63) | 128;
		}
		else if ((*len += 1))
			buff[i++] = ((ch >> 6) & 31) | 192;
		buff[i++] = (ch & 63) | 128;
	}
	else if ((*len += 1))
		buff[i++] = ch;
}

void	ft_putchar_fd(int c, int fd)
{
	char		buff2[10];
	int			i;

	i = 0;
	ft_putwchart(c, &i, buff2);
	write(fd, buff2, i);
	g_cont += i;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   wchar_work2.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dprovorn <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/12/27 15:19:24 by dprovorn          #+#    #+#             */
/*   Updated: 2016/12/27 15:19:27 by dprovorn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "header.h"

void	ft_putwstr(wchar_t *wstr)
{
	while (*wstr)
	{
		ft_putchar_fd(*wstr, 1);
		wstr++;
	}
}

int		ft_wstrlen(wchar_t *wstr)
{
	int i;

	i = 0;
	while (*wstr)
	{
		if (*wstr < 128)
			i++;
		else if (*wstr < 2047)
			i += 2;
		else if (*wstr < 65535)
			i += 3;
		else
			i += 4;
		wstr++;
	}
	return (i);
}
